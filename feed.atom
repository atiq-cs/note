<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://note.iqubit.xyz/</id>
	<title />
	<link rel="self" href="https://note.iqubit.xyz/" />
	<rights>Copyright © 2021</rights>
	<updated>2021-11-30T23:54:29Z</updated>
	<subtitle>Head's in the cloud! A Qubit Blog!</subtitle>
	<entry>
		<id>https://note.iqubit.xyz/posts/solana-cli</id>
		<title>Creating Token, NFT using Solana</title>
		<link href="https://note.iqubit.xyz/posts/solana-cli" />
		<updated>2021-10-24T00:00:00Z</updated>
		<content>&lt;p&gt;Using the Token Program we are able to create fungible and non-fungible tokens.&lt;/p&gt;
&lt;h3 id="pre-requisites"&gt;Pre-requisites&lt;/h3&gt;
&lt;p&gt;We need the token program to be able to accomplish those. We follow official documentation: &lt;a href="https://spl.solana.com/token"&gt;SPL Solana Token&lt;/a&gt;. We need a Linux Machine or VM with about 16GB or more main memory. Free tier aws linux vm doesn't work.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install Rust&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install Solana CLI&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As per &lt;a href="https://docs.solana.com/cli/install-solana-cli-tools"&gt;solana docs - install-solana-cli-tools&lt;/a&gt; we install solana cli and export its installation location into &lt;code&gt;PATH&lt;/code&gt; variable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sh -c &amp;quot;$(curl -sSfL https://release.solana.com/v1.8.1/install)&amp;quot;
export PATH=&amp;quot;/home/atiq/.local/share/solana/install/active_release/bin:$PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install required packages for building &lt;code&gt;spl-token-cli&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf install openssl-devel --assumeyes
sudo dnf install libudev-devel --assumeyes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we install the token library program,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cargo install spl-token-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;aws free tier linux VM usually hit following OOM error,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;could not compile libsecp256k1 signal: 9, SIGKILL: kill
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the build is successful, we check config,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ solana config get
Config File: /home/atiq/.config/solana/cli/config.yml
RPC URL: https://api.mainnet-beta.solana.com 
WebSocket URL: wss://api.mainnet-beta.solana.com/ (computed)
Keypair Path: /home/atiq/.config/solana/id.json 
Commitment: confirmed 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, RPC is set to mainnet. Let's change it to dev so that we can do some interesting experiments.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ solana config set --url https://api.devnet.solana.com
Config File: /home/atiq/.config/solana/cli/config.yml
RPC URL: https://api.devnet.solana.com 
WebSocket URL: wss://api.devnet.solana.com/ (computed)
Keypair Path: /home/atiq/.config/solana/id.json 
Commitment: confirmed 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get keypair let's create a FileSystem Wallet.&lt;/p&gt;
&lt;h2 id="creating-file-system-wallet"&gt;Creating File System Wallet&lt;/h2&gt;
&lt;p&gt;main reference: &lt;a href="https://docs.solana.com/wallet-guide/file-system-wallet"&gt;https://docs.solana.com/wallet-guide/file-system-wallet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is insecure because the keypair files are unencrypted.&lt;/p&gt;
&lt;p&gt;Let's create key pair,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir ~/solana-wallet

$ solana-keygen new --outfile ~/solana-wallet/keypair.json
Generating a new keypair
For added security, enter a BIP39 passphrase

NOTE! This passphrase improves security of the recovery seed phrase NOT the
keypair file itself, which is stored as insecure plain text

BIP39 Passphrase (empty for none): 
Wrote new keypair to /home/atiq/solana-wallet/keypair.json
==============================================================================
pubkey: 5cESBj8D4d6heCiYTKxJSs5Adtbf9rsFedVoZJnRRM7c
==============================================================================
Save this seed phrase and your BIP39 passphrase to recover your new keypair:
key battle mystery control bonus manual thought jazz kidney slam plastic token
==============================================================================
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Verify, just in case,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;solana-keygen verify 5cESBj8D4d6heCiYTKxJSs5Adtbf9rsFedVoZJnRRM7c ~/solana-wallet/keypair.json
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="creating-tokens"&gt;Creating Tokens&lt;/h2&gt;
&lt;p&gt;If we have successfully previous sections we can create Tokens now.&lt;/p&gt;
&lt;p&gt;Let's set keypair in solana config that we got from file system wallet (previous section),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ solana config set --keypair $HOME/solana-wallet/keypair.json
Config File: /home/atiq/.config/solana/cli/config.yml
RPC URL: https://api.devnet.solana.com 
WebSocket URL: wss://api.devnet.solana.com/ (computed)
Keypair Path: /home/atiq/solana-wallet/keypair.json 
Commitment: confirmed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need some SOL to perform our next actions.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ solana airdrop 1
Requesting airdrop of 1 SOL
Signature: 6GVKHvFdBrTC93i4m7Jp2o12VLVsSyJFYHHBvcXBMwSsa8MBz83TCnfDgcijrUHBcuZrsyud4d5oUrBFMfUyt1tM
1 SOL
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="creating-fungible-token"&gt;Creating Fungible Token&lt;/h3&gt;
&lt;p&gt;Let's create token,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;spl-token create-token
Creating token GjvWk83m1vKQjmQU2dPnLTRvAKjtAKsAmKKNu7Gyk93
Signature: 2ivgjD3N7xpj2vhDg4YoF3gYMAwkytmbydYeyWVRLzFuUYusUZ4oko6eLTMAws4NKW9YtUuFTcMfEQHYiwgceaCD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mint 100 new tokens,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;spl-token mint GjvWk83m1vKQjmQU2dPnLTRvAKjtAKsAmKKNu7Gyk93 100
Minting 100 tokens
Token: GjvWk83m1vKQjmQU2dPnLTRvAKjtAKsAmKKNu7Gyk93
Recipient: F8xUCvGx19sZJVy1cMkZgFRMmU7DWCyXTzDebDzDPnwv
Signature: 5i2y9eBAYipJVGsqU6fLR8q61CgJpX1B9iU6BdHh5iPcE9JtefsGPJ7nKQuEjGSqVxqXKHAPC5hPFp7uSzXJpJMn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check token supply,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ spl-token supply GjvWk83m1vKQjmQU2dPnLTRvAKjtAKsAmKKNu7Gyk93
100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check token balance,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ spl-token balance GjvWk83m1vKQjmQU2dPnLTRvAKjtAKsAmKKNu7Gyk93
100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Accounts,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ spl-token accounts
Token                                         Balance
---------------------------------------------------------------
GjvWk83m1vKQjmQU2dPnLTRvAKjtAKsAmKKNu7Gyk93   100
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="creating-nft"&gt;Creating NFT&lt;/h3&gt;
&lt;p&gt;[TODO]
will post after fixing AWS RHEL instance..&lt;/p&gt;
&lt;h3 id="notes-on-ubuntu-build"&gt;Notes on Ubuntu Build&lt;/h3&gt;
&lt;p&gt;Requires following,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install pkg-config libssl-dev libudev-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Otherwise it complains,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Package openssl was not found in the pkg-config search path.
Perhaps you should add the directory containing `openssl.pc' to the PKG_CONFIG_PATH environment variable
No package 'openssl' found
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A successful build looks like this,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tail ~/logs/solana_log.txt
Compiling zstd v0.5.4+zstd.1.4.7
Compiling solana-account-decoder v1.7.11
Compiling solana-transaction-status v1.7.11
Compiling solana-client v1.7.11
Compiling solana-cli-output v1.7.11
Compiling spl-token-cli v2.0.15
    Finished release [optimized] target(s) in 6m 47s
Installing /home/atiq/.cargo/bin/spl-token
Installed package `spl-token-cli v2.0.15` (executable `spl-token`)
warning: be sure to add `/home/atiq/.cargo/bin` to your PATH to be able to run the installed binaries
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>Head's in the cloud! A Qubit Blog!</summary>
	</entry>
	<entry>
		<id>https://note.iqubit.xyz/posts/google-chrome-linux</id>
		<title>Google Chrome on Linux</title>
		<link href="https://note.iqubit.xyz/posts/google-chrome-linux" />
		<updated>2021-10-24T00:00:00Z</updated>
		<content>&lt;p&gt;In new system, i.e, fedora 34/35 etc this is the way,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf config-manager --set-enabled google-chrome
sudo dnf install google-chrome-stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to install a beta release of google-chrome apply this command,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo dnf install google-chrome-beta
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To install the latest development release apply following,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo dnf install google-chrome
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are using other operating systems continue reading.&lt;/p&gt;
&lt;p&gt;Generally, there are 3 ways of installing Google Chrome:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using dnf (&lt;code&gt;apt-get&lt;/code&gt; on Ubuntu), setting up with google's repository in dnf configuration file or ubuntu's aptitude source.lst&lt;/li&gt;
&lt;li&gt;Locally download chrome rpm or debian package and apply dnf localinstall command&lt;/li&gt;
&lt;li&gt;last option: Download all dependencies manually and install them one by one, then install google-chrome package.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="earlier-systems-fedora-core-rhel-cent-os-etc"&gt;Earlier Systems (Fedora Core, RHEL, Cent-OS etc)&lt;/h3&gt;
&lt;p&gt;To enable google's dnf repository add a repo file inside directory &lt;code&gt;/etc/dnf.repos.d/&lt;/code&gt; named google-chrome.repo For 64 bit systems contents should look like this,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[google-chrome]
name=google-chrome - \$basearch
baseurl=http://dl.google.com/linux/chrome/rpm/stable/\$basearch
enabled=1
gpgcheck=1
gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Afterwards, if you want to install a stable release of google-chrome apply this command,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo dnf install google-chrome-stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have trouble accessing https URLs substitute https using http on the gpgkey field. This is useful when you hit errors like this,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error: failure: No more mirrors to try.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or error such as this,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GPG key retrieval failed: [Errno 14] problem making ssl connection
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Previously, we used to manually substitute the base url like this (not required anymore),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[google-chrome]
name=google-chrome - 64-bit
baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64
enabled=1
gpgcheck=1
gpgkey=http://dl-ssl.google.com/linux/linux_signing_key.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For 32 bit systems contents should be like this,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[google-chrome]
name=google-chrome - 32-bit
baseurl=http://dl.google.com/linux/chrome/rpm/stable/i386
enabled=1
gpgcheck=1
gpgkey=http://dl-ssl.google.com/linux/linux_signing_key.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Beaware that, google stopped updating 32 bit builds for Linux. If you install those versions you won't receive updates.&lt;/p&gt;
&lt;h3 id="rhelcent-os-7"&gt;RHEL/Cent-OS 7&lt;/h3&gt;
&lt;p&gt;RHEL/CentOS 7 have all required packages available for Google Chrome. Hence, a simple,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dnf install google-chrome-stable   
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;command dies the job. However, if you don't have redhat subscription you might get following error,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;libxss.so.1()(64bit) is needed by google-chrome-stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you enable local repository following instruction at &lt;a href="https://fftsys.azurewebsites.net/tech/how-to-setup-rhel-fedora-cent-os-dvd-or-iso-as-local-repository-to-install-packages"&gt;fftsys - Setup-RHEL-DVD-ISO-as-local-repository-to-install-packages&lt;/a&gt; the same previous dnf command completes without any error.&lt;/p&gt;
&lt;h3 id="using-apt-get-on-debian-system-ubuntu-etc"&gt;Using apt-get on debian system (ubuntu etc)&lt;/h3&gt;
&lt;p&gt;Add signing key&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add google repository to the sources list,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo sh -c 'echo &amp;quot;deb http://dl.google.com/linux/chrome/deb/ stable main&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list.d/google.list'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update and install chrome,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install google-chrome-stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For Ubuntu's new release 13.04 if you face following error &amp;quot;Error: Dependency is not satisfiable: libudev0(&amp;gt;=147)&amp;quot; use the beta version of chrome which has already resolved it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install google-chrome-beta
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Chromium project has details on the issue &lt;a href="https://code.google.com/p/chromium/issues/detail?id=226002"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="chrome-on-rhel-6-or-earlier"&gt;Chrome on RHEL 6 or Earlier&lt;/h3&gt;
&lt;p&gt;With RHEL 6 you will run into issues while installing google-chrome. Officially, Google Chrome is not supported on RHEL 6 or earlier since Google Chrome 28. If you are okay with experimental third party script to install google chrome you can follow &lt;a href="http://tecadmin.net/install-google-chrome-in-centos-rhel-and-fedora/#"&gt;tecadmin's article&lt;/a&gt;. You can install chromium as an alternative. &lt;a href="http://www.if-not-true-then-false.com/"&gt;If Not True Then False&lt;/a&gt; provides instructions &lt;a href="http://www.if-not-true-then-false.com/2013/install-chromium-on-centos-red-hat-rhel/"&gt;if-not-true-then-false's blog - how to install chromium on rhel&lt;/a&gt;. If an updated firefox does the job for you in RHEL old OSs in that case you can try &lt;a href="http://rpms.famillecollet.com/"&gt;remi repository&lt;/a&gt; to update firefox. Check &lt;a href="http://blog.famillecollet.com/pages/Config-en"&gt;remi famillecollet's site&lt;/a&gt; for info, tecmint also has an article &lt;a href="http://www.tecmint.com/install-firefox-in-rhelcentos-6-3-fedora-17-16/"&gt;Installing or Updating Firefox 30 using Remi&lt;/a&gt;. If you hate 3rd parties you can simply download the archive from firefox's site, extract it and run (possibly add few links such as in /usr/bin for convenience)&lt;/p&gt;
&lt;h3 id="installing-using-direct-full-package"&gt;Installing using direct full package&lt;/h3&gt;
&lt;p&gt;Download google chrome linux package first from &lt;a href="https://www.google.com/intl/en/chrome/browser/"&gt;Chrome's page&lt;/a&gt;. Apply this command in the directory where you downloaded &lt;a href="https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm"&gt;the file&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf localinstall google-chrome-stable_current_x86_64.rpm    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to install the package manually the command will be like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dpkg -i google-chrome-stable_current_x86_64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="references"&gt;References&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.if-not-true-then-false.com/2010/install-google-chrome-with-dnf-on-fedora-red-hat-rhel/"&gt;Install Google Chrome on Fedora 17/16, CentOS/Red Hat (RHEL) 6.3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Commit history&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;update fedora 34-35 - Oct 26, 2021&lt;/li&gt;
&lt;li&gt;update fedora section - Dec 19, 2016&lt;/li&gt;
&lt;li&gt;update - June 29, 2014&lt;/li&gt;
&lt;/ol&gt;
</content>
		<summary>Head's in the cloud! A Qubit Blog!</summary>
	</entry>
	<entry>
		<id>https://note.iqubit.xyz/posts/net-core-mvchello-entity-framework2021-08</id>
		<title>dotnet core Hello World with Entity Framework and Database</title>
		<link href="https://note.iqubit.xyz/posts/net-core-mvchello-entity-framework2021-08" />
		<updated>2021-08-12T00:00:00Z</updated>
		<content>&lt;h2 id="razor-pages-app"&gt;Razor Pages App&lt;/h2&gt;
&lt;p&gt;We follow this primary reference documentation, &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/data/ef-rp/intro"&gt;MS Docs - aspnet/core/data/ef-rp/intro&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet new webapp -n P03_ContosoUniversity_RP
cd P03_ContosoUniversity_RP

dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design
dotnet add package Microsoft.EntityFrameworkCore.SQLite
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Microsoft.EntityFrameworkCore.Tools

dotnet add package Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore

dotnet aspnet-codegenerator razorpage -m Student -dc ContosoUniversity.Data.SchoolContext `
-udl -outDir Pages\Students --referenceScriptLibraries
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we are using SQLite database,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet aspnet-codegenerator razorpage -m Student -dc ContosoUniversity.Data.SchoolContext `
-udl -outDir Pages\Students --referenceScriptLibraries -sqlite
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We refactor all &lt;code&gt;P03_ContosoUniversity_RP&lt;/code&gt; with &lt;code&gt;ContosoUniversity&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Scaffolding source files have &lt;code&gt;context.Student&lt;/code&gt; which is not correct. We update those with &lt;code&gt;context.Students&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet tool update --global dotnet-ef
dotnet ef database update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;EF supports dev environment as well,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet ef database update -- --environment Development
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we run it,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$Env:ASPNETCORE_ENVIRONMENT = &amp;quot;Development&amp;quot;
dotnet run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There's some differences with the cu50 sample.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Pages\Students\Index.cshtml.cs&lt;/code&gt; is much larger not just one line,&lt;/p&gt;
&lt;p&gt;Student = await _context.Students.ToListAsync();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Indentations under &lt;code&gt;Data&lt;/code&gt; folder&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code for Error messages, logger etc in a number of files&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;they have some region definitions with snippet names&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In summary, the actual cu50 sample is much more complete than the one we create by following the tutorial.&lt;/p&gt;
&lt;p&gt;Some observations,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;localdb mdf files are usually stored at &lt;code&gt;$HOME&lt;/code&gt; (for example, &lt;code&gt;C:\Users\YOUR_NAME&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="references"&gt;References&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Refs on Razor Pages&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/razor-pages"&gt;Razor Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.learnrazorpages.com/razor-pages/handler-methods"&gt;learnrazorpages - Handler Methods in Razor Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Refs on Entity Framework Performance&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/swlh/entity-framework-common-performance-mistakes-cdb8861cf0e7"&gt;Common performance mistakes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example to connect from Visual Studio Server Explorer&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Server Name: (LocalDb)\MSSQLLocalDB
DB: CU-1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ref: 1. &lt;a href="https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/introduction/creating-a-connection-string"&gt;connection strings example&lt;/a&gt;, 2. &lt;a href="https://stackoverflow.com/questions/21563940/how-to-connect-to-localdb-in-visual-studio-server-explorer"&gt;how to connect database in visual studio data explorer&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="mvc-app"&gt;MVC App&lt;/h2&gt;
&lt;p&gt;Steps&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet new mvc -n P03_ContosoUniversity
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace &lt;code&gt;P03_ContosoUniversity&lt;/code&gt; with 'Contoso University'.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet add package Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Primary reference documentation, &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/intro"&gt;MS Docs - aspnet/core/data/ef-mvc/intro&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We add default connection in &lt;code&gt;appsettings.Development.json&lt;/code&gt;. We pretty much follow the steps in tutorial and able to produce working version. Only, using VS Code instead of Visual Studio Pro is bit of work since all CLI commands are not provided and we need to repro them, especially scaffolding ones.&lt;/p&gt;
&lt;h2 id="razor-pages-app-net-core"&gt;Razor Pages App (net core)&lt;/h2&gt;
&lt;p&gt;This is an experiment to run the EF Core Razor App with .net core,&lt;/p&gt;
&lt;p&gt;We update net framework target in &lt;code&gt;.csproj&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;We add following nuget packages,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet new webapp -n P03_ContosoUniversity_netcore
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Microsoft.EntityFrameworkCore
dotnet add package Microsoft.EntityFrameworkCore.SQLite
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We add all the scaffolding files from previous project (above) that targets .net6&lt;/p&gt;
&lt;p&gt;We end up finding that the following method calls:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// in ConfigureServices
// services.AddDatabaseDeveloperPageExceptionFilter();
// in Configure
// app.UseMigrationsEndPoint();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;require &lt;code&gt;Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore&lt;/code&gt; package,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet add package Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore
Determining projects to restore...
Writing C:\Users\atiq\AppData\Local\Temp\tmp6CF5.tmp
info : Adding PackageReference for package 'Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore' into project 'D:\Code\CS\P03_ContosoUniversity_netcore\P03_ContosoUniversity_netcore.csproj'.
info :   GET https://api.nuget.org/v3/registration5-gz-semver2/microsoft.aspnetcore.diagnostics.entityframeworkcore/index.json
info :   OK https://api.nuget.org/v3/registration5-gz-semver2/microsoft.aspnetcore.diagnostics.entityframeworkcore/index.json 419ms
info : Restoring packages for D:\Code\CS\P03_ContosoUniversity_netcore\P03_ContosoUniversity_netcore.csproj...
error: NU1202: Package Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 5.0.9 is not compatible with netcoreapp3.1 (.NETCoreApp,Version=v3.1). Package Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 5.0.9 supports: net5.0 (.NETCoreApp,Version=v5.0)
error: Package 'Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore' is incompatible with 'all' frameworks in project 'D:\Code\CS\P03_ContosoUniversity_netcore\P03_ContosoUniversity_netcore.csproj'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, the old version (3.1.18 supports .net core) of &lt;code&gt;Diagnostics.EntityFrameworkCore&lt;/code&gt; doesn't have the definitions mentioned above.&lt;/p&gt;
&lt;p&gt;Conclusion: since some of the packages i.e., &lt;code&gt;Diagnostics.EntityFrameworkCore&lt;/code&gt; don't target .net core and only targets newer versions of net framework, for example, .net 6. We cannot run the examples from official tutorial that uses EF Core or Diagnostics (may be Logging package as well).&lt;/p&gt;
</content>
		<summary>Head's in the cloud! A Qubit Blog!</summary>
	</entry>
	<entry>
		<id>https://note.iqubit.xyz/posts/dennis-ritchie-c</id>
		<title>Dennis Ritchie - The C Programming Language</title>
		<link href="https://note.iqubit.xyz/posts/dennis-ritchie-c" />
		<updated>2021-03-19T00:00:00Z</updated>
		<content>&lt;h3 id="format-specifiers"&gt;Format Specifiers&lt;/h3&gt;
&lt;p&gt;Right justification example,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;printf(&amp;quot;%3d %6d\n&amp;quot;, fahr, celsius);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="automatic-type-casting"&gt;Automatic Type Casting&lt;/h3&gt;
&lt;p&gt;If an arithmetic operator has integer operands, an integer operation is performed. If an arithmetic operator has one floating-point operand and one integer operand, however, the integer will be converted to floating point before the operation is done. If we had written (fahr-32), the 32 would be automatically converted to floating point. Nevertheless, writing floating-point constants with explicit decimal points even when they have integral values emphasizes their floating-point nature for human readers.&lt;/p&gt;
&lt;p&gt;Among others, &lt;code&gt;printf&lt;/code&gt; recognizes,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;%o for octal&lt;/li&gt;
&lt;li&gt;%x for hexadecimal&lt;/li&gt;
&lt;li&gt;%c for character&lt;/li&gt;
&lt;li&gt;%s for character string and,&lt;/li&gt;
&lt;li&gt;%% for itself&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="getchar-and-putchar"&gt;getchar and putchar&lt;/h3&gt;
&lt;p&gt;The problem is distinguishing the end of input from valid data. The solution is that getchar returns a distinctive value when there is no more input, a value that cannot be confused with any real character. This value is called EOF, for &amp;quot;end of file&amp;quot;. We must declare c to be a type big enough to hold any value that getchar returns. We can't use char since c must be big enough to hold EOF in addition to any possible char. Therefore we use int.&lt;/p&gt;
&lt;p&gt;EOF is an integer defined in &lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt;, but the specific numeric value doesn't matter as long as it is not the same as any char value. By using the symbolic constant, we are assured that nothing in the program depends on the specific numeric value.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;  

/* copy input to output; 2nd version */  
main() {
int c;

while ((c = getchar()) != EOF)  
    putchar(c);  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="in-and-out-modifiers"&gt;IN and OUT Modifiers&lt;/h3&gt;
&lt;p&gt;We prefer the symbolic constants &lt;code&gt;IN&lt;/code&gt; and &lt;code&gt;OUT&lt;/code&gt; to the literal values 1 and 0 because they make the program more readable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

#define IN 1 /* inside a word */
#define OUT 0 /* outside a word */

/* count lines, words, and characters in input */
main() {
    int c, nl, nw, nc, state;
    state = OUT;
    nl = nw = nc = 0;

    while ((c = getchar()) != EOF) {
        ++nc;

        if (c == '\n')
        ++nl;

        if (c == ' ' || c == '\n' || c = '\t')
        state = OUT;

        else if (state == OUT) {
        state = IN;
        ++nw;
        }
    }

    printf(&amp;quot;%d %d %d\n&amp;quot;, nl, nw, nc);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In a program as tiny as this, it makes little difference, but in larger programs, the increase in clarity is well worth the modest extra effort to write it this way from the beginning. You'll also find that it's easier to make extensive changes in programs where magic numbers appear only as symbolic constants.&lt;/p&gt;
&lt;h3 id="arguments-and-parameters"&gt;Arguments and parameters&lt;/h3&gt;
&lt;p&gt;The function power is called twice by main, in the line&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;printf(&amp;quot;%d %d %d\n&amp;quot;, i, power(2,i), power(-3,i));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each call passes two arguments to power, which each time returns an integer to be formatted and printed. In an expression, power(2,i) is an integer just as 2 and i are. (Not all functions produce an integer value; we will take this up in Chapter 4.)&lt;/p&gt;
&lt;p&gt;The first line of power itself,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int power(int base, int n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;declares the parameter types and names, and the type of the result that the function returns. The names used by power for its parameters are local to power, and are not visible to any other function: other routines can use the same names without conflict. This is also true of the variables i and p: the i in power is unrelated to the i in main.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We will generally use &lt;code&gt;parameter&lt;/code&gt; for a variable named in the parenthesized list in a function.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="argument-passing-call-by-value"&gt;Argument Passing: Call by Value&lt;/h3&gt;
&lt;p&gt;In C, all function arguments are passed &amp;quot;by value&amp;quot;. This means that the called function is given the values of its arguments in temporary variables rather than the originals. This leads to some different properties than are seen with &amp;quot;call by reference&amp;quot; languages like Fortran or with var parameters in Pascal, in which the called routine has access to the original argument, not a local copy.&lt;/p&gt;
&lt;h3 id="constant-expressions"&gt;Constant Expressions&lt;/h3&gt;
&lt;p&gt;A &lt;em&gt;constant expression&lt;/em&gt; is an expression that involves only constants. Such expressions may be evaluated at during compilation rather than run-time, and accordingly may be used in any place that a constant can occur, as in&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define MAXLINE 1000
char line[MAXLINE+1];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define LEAP 1 /* in leap years */
int days[31+28+LEAP+31+30+31+30+31+31+30+31+30+31];
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="string-constants"&gt;String Constants&lt;/h3&gt;
&lt;p&gt;String constants can be concatenated at compile time:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;hello, &amp;quot; &amp;quot;world&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is equivalent to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;hello, world&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is useful for splitting up long strings across several source lines.&lt;/p&gt;
&lt;h3 id="enumeration"&gt;Enumeration&lt;/h3&gt;
&lt;p&gt;An enumeration is a list of constant integer values, as in&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enum boolean { NO, YES };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first name in an enum has value 0, the next 1, and so on, unless explicit values are specified. If not all values are specified, unspecified values continue the progression from the last specified value, as the second of these examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enum escapes { BELL = '\a', BACKSPACE = '\b', TAB = '\t',
    NEWLINE = '\n', VTAB = '\v', RETURN = '\r' };

enum months { JAN = 1, FEB, MAR, APR, MAY, JUN,
    JUL, AUG, SEP, OCT, NOV, DEC }; /* FEB = 2, MAR = 3, etc. */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Names in different enumerations must be distinct.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Values need not be distinct in the same enumeration.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="variable-initialization"&gt;Variable Initialization&lt;/h3&gt;
&lt;p&gt;External and static variables are initialized to zero by default. Automatic variables for which is no explicit initializer have undefined (i.e., garbage) values.&lt;/p&gt;
&lt;h3 id="precedence"&gt;Precedence&lt;/h3&gt;
&lt;p&gt;The precedence of &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; is higher than that of ||, and both are lower than relational and equality operators, so expressions like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i &amp;lt; lim-1 &amp;amp;&amp;amp; (c=getchar()) != '\n' &amp;amp;&amp;amp; c != EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;need no extra parentheses. But since the precedence of != is higher than assignment, parentheses are needed in&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(c=getchar()) != '\n'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to achieve the desired result of assignment to c and then comparison with '\n'.&lt;/p&gt;
&lt;p&gt;By definition, the numeric value of a relational or logical expression is 1 if the relation is true, and 0 if the relation is false.&lt;/p&gt;
&lt;h3 id="type-conversions"&gt;Type Conversions&lt;/h3&gt;
&lt;p&gt;Expressions that might lose information, like assigning a longer integer type to a shorter, or a floating-point type to an integer, may draw a warning, but they are not illegal.&lt;/p&gt;
&lt;h3 id="bitwise-operators"&gt;Bitwise Operators&lt;/h3&gt;
&lt;p&gt;The bitwise AND operator &amp;amp; is often used to mask off some set of bits, for example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n = n &amp;amp; 0177;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sets to zero all but the low-order 7 bits of n.&lt;/p&gt;
&lt;p&gt;The bitwise OR operator | is used to turn bits on:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = x | SET\_ON;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sets to one in x the bits that are set to one in SET_ON.&lt;/p&gt;
&lt;p&gt;The bitwise exclusive OR operator ^ sets a one in each bit position where its operands have different bits, and zero where they are the same.&lt;/p&gt;
&lt;p&gt;The unary operator ~ yields the one's complement of an integer; that is, it converts each 1-bit into a 0-bit and vice versa. For example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = x &amp;amp; ~077
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sets the last six bits of x to zero. Note that &lt;code&gt;x &amp;amp; ~077&lt;/code&gt; is independent of word length, and is thus preferable to, for example, &lt;code&gt;x &amp;amp; 0177700&lt;/code&gt;, which assumes that x is a 16-bit quantity. The portable form involves no extra cost, since &lt;code&gt;~077&lt;/code&gt; is a constant expression that can be evaluated at compile time.&lt;/p&gt;
&lt;h3 id="precedence-of-bitwise-operators"&gt;Precedence of bitwise operators&lt;/h3&gt;
&lt;p&gt;Note that the precedence of the bitwise operators &amp;amp;, ^, and | falls below == and !=. This implies that bit-testing expressions like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if ((x &amp;amp; MASK) == 0) ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;must be fully parenthesized to give proper results.&lt;/p&gt;
&lt;h3 id="switch-statement"&gt;Switch Statement&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Each case is labeled by one or more integer-valued constants or constant expressions.&lt;/em&gt; If a case matches the expression value, execution starts at that case. All case expressions must be different. The case labeled default is executed if none of the other cases are satisfied. A default is optional; if it isn't there and if none of the cases match, no action at all takes place. Cases and the default clause can occur in any order.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;switch (expression) {
    case const-expr: statements
    case const-expr: statements
    default: statements
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The break statement causes an immediate exit from the switch. Because cases serve just as labels, after the code for one case is done, execution falls through to the next unless you take explicit action to escape. break and return are the most common ways to leave a switch.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The commas that separate function arguments, variables in declarations, etc., are not comma operators, and do not guarantee left to right evaluation.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Because the else part of an if-else is optional, there is an ambiguity when an else if omitted from a nested if sequence. This is resolved by associating the else with the closest previous else-less if. For example, in&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (n &amp;gt; 0)
    if (a &amp;gt; b)
        z = a;
    else
        z = b;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The else goes to the inner if, as we have shown by indentation. If that isn't what you want, braces must be used to force the proper association:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (n &amp;gt; 0) {
    if (a &amp;gt; b)
        z = a;
}
else
    z = b;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="reverse-number-example"&gt;Reverse Number Example&lt;/h3&gt;
&lt;p&gt;I tried a usual implementation of reverse number as I was learning,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

main() {
    int n;

    printf(&amp;quot;Enter number to reverse: &amp;quot;);
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;n);

    printf(&amp;quot;Reverse of that number is %d\n&amp;quot;, ReverseNum(n));
}

int ReverseNum(int a) {
    int res = 0;
    while (a) {
        res = res * 10 + a % 10;
        a /= 10;
    }
    return res;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Recursive version&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

main() {
    int n;

    printf(&amp;quot;Enter number to reverse: &amp;quot;);
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;n);

    printf(&amp;quot;Reverse of that number is %d\n&amp;quot;, ReverseNum(n, 0));
}

int ReverseNum(int a, int res) {
    if (a == 0)
        return res;

    res = ReverseNum(a/10, res) * 10 + a % 10;
    return res;
}
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>Head's in the cloud! A Qubit Blog!</summary>
	</entry>
	<entry>
		<id>https://note.iqubit.xyz/posts/pwsh/powershell-core</id>
		<title>Powershell Core Useful Commands</title>
		<link href="https://note.iqubit.xyz/posts/pwsh/powershell-core" />
		<updated>2021-03-19T00:00:00Z</updated>
		<content>&lt;p&gt;&lt;em&gt;This article formerly titled as 'Powershell Frequently Used Commands. Even though the article is titled "core" it includes some Powershell contents as well.'&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Powershell Core refers to Powershell versions 6 or later.
More cmdlets are on the other article: &lt;code&gt;powershell-core-cmdlets&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="initialization-of-shell"&gt;Initialization of Shell&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;This section is for my personalized shell; please feel free to skip it.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Initiate a shell using a specified init script (replaced &lt;code&gt;Env:WinDir/*&lt;/code&gt; symbolic link),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pwsh -NoExit D:\pwsh\Init.ps1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For Machine Learning customized shell, I try adding an arg,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pwsh -NoExit D:\pwsh\Init.ps1 ML
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="new-to-pwsh"&gt;New to pwsh?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Clear-Host&lt;/code&gt; is equivalent to cls&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Get-Location&lt;/code&gt; is alias to &lt;code&gt;pwd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ls, cat, popd, pushd etc are supported through aliases.&lt;/p&gt;
&lt;p&gt;Write-Host is equivalent to echo. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo 'hello'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ps&lt;/code&gt; is equivalent to Get-Process or to List processes or doing &lt;code&gt;tasklist&lt;/code&gt;.
Stop-Proccess instead of taskkill&lt;/p&gt;
&lt;p&gt;Example of starting pwsh with an initiazation script or calling a script with an arg,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Start-Process pwsh -ArgumentList '-NoExit', 'Init-App.ps1 foo' -ErrorAction 'stop'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;above, &lt;code&gt;foo&lt;/code&gt; is argument.&lt;/p&gt;
&lt;p&gt;Split string based on delimeter,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$Env:Path –split ';'
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="cmdlets"&gt;Cmdlets&lt;/h3&gt;
&lt;h2 id="file-management"&gt;File Management&lt;/h2&gt;
&lt;p&gt;Filter files containing name pattern,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gci -filter '*word*'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create directory,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;New-Item D:\work\git -Type Directory
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create file (alternative of Unix &lt;code&gt;touch&lt;/code&gt;),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;New-Item C:\scripts\new_file.txt -type file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Show files in order of modified time,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ Get-ChildItem -Path C:\windows\CPE\Chef\outputs | Where-Object { -not $_.PsIsContainer } |
    Sort-Object LastWriteTime -Descending | Select-Object -first 10 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="control-panel-cmdlet"&gt;Control Panel Cmdlet&lt;/h2&gt;
&lt;p&gt;Handy cmds follow, &lt;a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/show-controlpanelitem"&gt;ref&lt;/a&gt; to access sys properties,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Show-ControlPanelItem -Name System
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Names supported by &lt;code&gt;Show-ControlPanelItem&lt;/code&gt;,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network and Sharing Center&lt;/li&gt;
&lt;li&gt;Device Manager&lt;/li&gt;
&lt;li&gt;Programs and Features&lt;/li&gt;
&lt;li&gt;Default Programs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For, Sound mouse etc we do,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sound&lt;/li&gt;
&lt;li&gt;Mouse&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="network-cmdlets"&gt;Network Cmdlets&lt;/h2&gt;
&lt;p&gt;Ping hosts,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Test-Connection -Count 64 google.com
Test-Connection -Count 1024 google.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;host &lt;code&gt;bing.com&lt;/code&gt; does not reply to ICMP requests anymore, hence it's not worth trying &lt;code&gt;Test-Connection bing.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;if help modules are outdated this updates it,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Update-Help
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More network related cmdlets or commands are at &lt;a href="https://note.iqubit.xyz/network-wifi-cmd"&gt;wifi cmd article&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="other-cmdlets"&gt;Other Cmdlets&lt;/h2&gt;
&lt;p&gt;Get list of running processes (unique), show full path,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Get-Process | Select-Object -Unique Path
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When Windows Explorer or taskbar has trouble,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Stop-Process -Name explorer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Find difference between 2 text files,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Compare-Object (get-content one.txt) (get-content two.txt)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Scheduled Tasks,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Get-ScheduledTask -TaskName *chef*
Get-ScheduledTask -TaskPath \
Get-ScheduledTask -TaskPath \MSIT\
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rename Machine,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Rename-Computer -NewName JohnPC -Restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Event Log,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Show-EventLog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Show console host info,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ Get-Host
Name             : ConsoleHost
Version          : 6.2.3
InstanceId       : cddce532-924c-4a66-a671-bbea53caf430
UI               : System.Management.Automation.Internal.Host.InternalHostUserInterface
CurrentCulture   : en-US
CurrentUICulture : en-US
PrivateData      : Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy
DebuggerEnabled  : True
IsRunspacePushed : False
Runspace         : System.Management.Automation.Runspaces.LocalRunspace
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How to uninstall store application i.e., skype&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Get-AppxPackage Microsoft.SkypeApp | Remove-AppxPackage
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Get Software List,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Get-WmiObject -Class Win32_Product -Filter "Name = 'Java 8 (64 bit)'"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How to uninstall application,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$app = Get-WmiObject -Class Win32_Product -Filter "Name = 'Java 8 (64-bit)'"
$app.Uninstall()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="type-conversion"&gt;Type Conversion&lt;/h3&gt;
&lt;p&gt;This part also demonstrates how to use some datatype libraries in commands.&lt;/p&gt;
&lt;p&gt;Example 1, how do we find ascii number of a bunch of characters?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ [int[]][char[]] 'abcd'
97
98
99
100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additionally, to find ascii number of single char,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ [int][char] 'z'
122
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Moroever we can call &lt;code&gt;Array.Sort&lt;/code&gt; in following way,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$a = [int[]] @(9,5)
[Array]::Sort($a)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because these literatls i.e., 'xxx' in powershell is considered as string literal like python.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ 'z'.gettype()
IsPublic IsSerial Name                                     BaseType
-------- -------- ----                                     --------
True     True     String                                   System.Object
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="mathematics-library"&gt;Mathematics Library&lt;/h4&gt;
&lt;p&gt;Example usage of .net math library, using old friend the &lt;code&gt;power&lt;/code&gt; method,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Math]::Pow(2,13)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or finding a square root,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Math]::Sqrt(9)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="string-helpers"&gt;String Helpers&lt;/h4&gt;
&lt;p&gt;nll or empty related where &lt;code&gt;$ConfigName&lt;/code&gt; is an example variable,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[string]::IsNullOrEmpty($ConfigName)
[string]::IsEmpty($ConfigName)
[string]::Empty($ConfigName)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;substring example,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if ($loc.EndsWith("\")) {
    return $loc.Substring(0, $loc.Length-1)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which is fine to be replaced with,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (($lastindex = [int] $loc.lastindexof('\')) -ne -1) {
    return $loc.Substring(0, $lastindex)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="show-os-version"&gt;Show OS Version&lt;/h2&gt;
&lt;p&gt;Using Net Framework Library,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ [Environment]::OSVersion
Platform ServicePack Version      VersionString
-------- ----------- -------      -------------
Win32NT             10.0.18362.0 Microsoft Windows NT 10.0.18362.0

$ [Environment]::OSVersion.Version
Major  Minor  Build  Revision
-----  -----  -----  --------
10     0      18362  0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additionally, we can do this inspecting &lt;code&gt;hal.dll&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ [Version](Get-ItemProperty -Path "$($Env:Windir)\System32\hal.dll" -ErrorAction SilentlyContinue).VersionInfo.FileVersion.Split()[0]
Major  Minor  Build  Revision
-----  -----  -----  --------
10     0      18362  356
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="shell-variables"&gt;Shell Variables&lt;/h2&gt;
&lt;p&gt;To delete all contents of USB drive (this is dangerous as it deletea all contents and files/dirs from a drive),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Remove-Item -force l:\*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On pwsh,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ $profile
DocumentsDir\PowerShell\Microsoft.PowerShell_profile.ps1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On Powershell (Windows),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ $profile
DocumentsDir\\WindowsPowerShell\Microsoft.PowerShell_profile.ps1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Access history file,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ (Get-PSReadlineOption).HistorySavePath
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="invoking-legacy-powershell-features-from-pwsh"&gt;Invoking Legacy Powershell Features from pwsh&lt;/h2&gt;
&lt;p&gt;Say you have a script named &lt;code&gt;Bluetooth.ps1&lt;/code&gt; that uses Windows features i.e., COM. We invoke old Powershell to execute those.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Powershell -NoProfile -File Bluetooth.ps1 On
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="setting-permission-for-running-pwsh-on-a-new-machine"&gt;Setting permission for running pwsh on a new machine&lt;/h2&gt;
&lt;p&gt;By default, there are lot of warnings and requests for permission. To make things easier, we relax the permission by setting execution policy.
Set execution policy for current user &lt;a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy"&gt;ref&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Set-Executionpolicy Unrestricted -scope CurrentUser
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In old days, that used to be enough. If you get following,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PowerShell 6.2.3
Copyright (c) Microsoft Corporation. All rights reserved.

https://aka.ms/pscore6-docs
Type 'help' to get help.

Security warning
Run only scripts that you trust. While scripts from the internet can be useful, this script can potentially harm your computer. If you trust this script, use the Unblock-File cmdlet to allow the script to run without this warning
message. Do you want to run D:\Doc\PowerShell\Microsoft.PowerShell_profile.ps1?
[D] Do not run  [R] Run once  [S] Suspend  [?] Help (default is "D"): R
Loading personal and system profiles took 4862ms.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try unblocking,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Unblock-File D:\Doc\PowerShell\Microsoft.PowerShell_profile.ps1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In worst situation, in corporate environments if that still does not work,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;File D:\Doc\PowerShell\Microsoft.PowerShell_profile.ps1 cannot be loaded. The file D:\Doc\PowerShell\Microsoft.PowerShell_profile.ps1 is not digitally signed. You cannot run this script on the current system. For more information about running scripts and setting execution policy, see about_Execution_Policies at https://go.microsoft.com/fwlink/?LinkID=135170.
At line:1 char:3
+ . 'D:\Doc\PowerShell\Microsoft.PowerShell_profile.ps1'
+   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ CategoryInfo          : SecurityError: (:) [], PSSecurityException
+ FullyQualifiedErrorId : UnauthorizedAccess
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we can apply bypass changing Registry,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Set-ItemProperty -Path HKLM:\Software\Policies\Microsoft\Windows\PowerShell -Name ExecutionPolicy -Value ByPass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In environments like school computers that are running SINC Site, bypassing in Process scope can be useful,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Set-ExecutionPolicy Bypass -Scope Process
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="variables-pwsh-vs-powershell"&gt;Variables pwsh vs Powershell&lt;/h2&gt;
&lt;p&gt;Following are new pwsh variables,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EnabledExperimentalFeatures    {}

IsCoreCLR                      True
IsLinux                        False
IsMacOS                        False
isSinglePS                     True
IsWindows                      True
LASTEXITCODE                   0

psConsoleType
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The shell modified following previously known Powershell variables,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;OutputEncoding
PROFILE
PSCommandPath
PSEdition
PSHOME
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="continue"&gt;continue&lt;/h2&gt;
&lt;p&gt;rest of the contents yet to be appended..&lt;/p&gt;
</content>
		<summary>Head's in the cloud! A Qubit Blog!</summary>
	</entry>
	<entry>
		<id>https://note.iqubit.xyz/posts/pwsh/powershell-core-cmdlets</id>
		<title>Powershell Core Cmdlets</title>
		<link href="https://note.iqubit.xyz/posts/pwsh/powershell-core-cmdlets" />
		<updated>2020-12-10T00:00:00Z</updated>
		<content>&lt;h3 id="start-process"&gt;Start-Process&lt;/h3&gt;
&lt;p&gt;Here are some handy cmds (Application Run Examples),&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Start&lt;/code&gt; is an alias of &lt;code&gt;Start-Process&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Start DevEnv /Edit, Stream-Converter.ps1
Start TeamViewer
Start CVpn-Client

Start Atom
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where I link &lt;code&gt;CVpn-Client&lt;/code&gt; to &lt;code&gt;C:\Program Files (x86)\Cisco\Cisco AnyConnect Secure Mobility Client\vpnui.exe&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;and, atom is usually linked to &lt;code&gt;C:\Users\atiq\AppData\Local\atom\atom.exe&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Syntax for microsoft store apps,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Start Microsoft-Edge:https://google.com
Start Skype:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For passing arguments to an application we can either add it right after the app name with a seperating space,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Start Notepad++ file_path
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, specify it in &lt;code&gt;ArgumentList&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Start Notepad++ -ArgumentList file_path
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, it's tricky if passed argument for example, &lt;code&gt;file_path&lt;/code&gt; above contains a space character.&lt;/p&gt;
&lt;p&gt;To make it work, we need to double quote them &lt;a href="https://stackoverflow.com/questions/22840882/powershell-opening-file-path-with-spaces"&gt;ref&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Start Notepad++ -ArgumentList &amp;quot;`&amp;quot;D:\Cool Soft\my awesome file.txt`&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="get-process"&gt;Get-Process&lt;/h3&gt;
&lt;p&gt;A simple run gives a technical summary of the process&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ Get-Process pwsh

NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName
------    -----      -----     ------      --  -- -----------
    80   117.16     170.47      25.61   21628   1 pwsh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get number of instances of a process&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function GetProcessInstanceNumber([string] $process) {
    &amp;#64;(Get-Process $process -ErrorAction 0).Count
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="service-management"&gt;Service Management&lt;/h2&gt;
&lt;p&gt;Get list of services currently running,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Get-Service | Where-Object {$_.Status -eq &amp;quot;Running&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Start a service,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Start-Service -Name VPNAgent
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Stop one,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Stop-Service -Name VPNAgent
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Useful for bluetooth service,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Start-Service bthserv
Stop-Service -Force bthserv
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>Head's in the cloud! A Qubit Blog!</summary>
	</entry>
	<entry>
		<id>https://note.iqubit.xyz/posts/pwsh/git-config-switch-using-powershell-script</id>
		<title>Switch among multiple Git Config/Profiles using Powershell</title>
		<link href="https://note.iqubit.xyz/posts/pwsh/git-config-switch-using-powershell-script" />
		<updated>2020-11-02T00:00:00Z</updated>
		<content>&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;Overview of the script,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;verify user name stuff, arguments&lt;/li&gt;
&lt;li&gt;switch profile based on first command line argument&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-script"&gt;final script&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;[CmdletBinding()]
param(
    [ValidateSet('USER_NAME_1', 'USER_NAME_2')]
    [Parameter(Mandatory=$true)] [string] $ProfileName,
    [Parameter(Mandatory=$true)] [string[]] $CredUserNames
)


&amp;lt;#
.SYNOPSIS
    Switch to given git config profile
.DESCRIPTION
    Sets for both git repo local and global,
    - user name
    - user email
    - credential user name
#&amp;gt;
function Main() {
    # Expecting switch between 2 users
    if ($CredUserNames.Length -lt 2) {
        throw [ArgumentException] ('Unexpected number of gUser Names!')
    }

    switch ($ProfileName) {
        &amp;quot;USER_NAME_1&amp;quot; {
            $gitUserName = git config --get user.name
            $shellUserName = $($Home.SubString($Home.LastIndexOf('\')+1))

            # Expecting git user name to start with Windows Login UserName
            # For example,
            #   windows username Mak will match with
            #   git user full name 'Atiq Rahman'
            if (-not ($gitUserName).StartsWith($shellUserName, [System.StringComparison]::`
                InvariantCultureIgnoreCase)) {
                throw [ArgumentException] ('Unexpected user name ' + $gitUserName + '!')
            }

            $gitUserEmail = git config --get user.email
            # global
            git config --global user.name &amp;quot;$gitUserName&amp;quot;
            git config --global user.email $gitUserEmail

            git config credential.username $CredUserNames[0]
            $Env:GITHUB_TOKEN = 'gxp_clylM69Sjj0OZz5JOKX98TzcIE2xBo1MjNTO'
            Break
        }
        &amp;quot;USER_NAME_2&amp;quot; {
            $gitUserName = git config --get user.name
            # last name of user 2, just for validation
            $userNameSuffix = 'USER2_SUFFIX'

            if (-not ($gitUserName).EndsWith($userNameSuffix)) {
                throw [ArgumentException] ('Unexpected user name ' + $gitUserName + '!')
            }

            $gitUserEmail = git config --get user.email
            # global
            git config --global user.name &amp;quot;$gitUserName&amp;quot;
            git config --global user.email $gitUserEmail

            git config credential.username $CredUserNames[1]
            $Env:GITHUB_TOKEN = 'gxp_84770a857cb1482de0e8af7c39a06de4ccf001eeb'
            Break
        }
        Default { &amp;quot;Unexpected $ProfileName!&amp;quot; }
    }

    VerifyGitProfile

    'Remember to set your GITHUB_TOKEN before invoking ''deploy'''
}

function VerifyGitProfile() {
    'Final Git Configuration:'
    git config --global --get user.name
    git config --global --get user.email
    git config --get user.name
    git config --get user.email
    git config --get credential.username
}

Main
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Copy of this script (including documentation) can be found at:
&lt;a href="https://github.com/atiq-cs/old-scripts/blob/dev/pwsh/Switch-GitConfig.ps1"&gt;https://github.com/atiq-cs/old-scripts/blob/dev/pwsh/Switch-GitConfig.ps1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More scripts like this can be found at:
&lt;a href="https://github.com/atiq-cs/old-scripts/blob/dev/pwsh"&gt;https://github.com/atiq-cs/old-scripts/blob/dev/pwsh&lt;/a&gt;&lt;/p&gt;
</content>
		<summary>Head's in the cloud! A Qubit Blog!</summary>
	</entry>
	<entry>
		<id>https://note.iqubit.xyz/posts/scm/git</id>
		<title>Useful Git Commands</title>
		<link href="https://note.iqubit.xyz/posts/scm/git" />
		<updated>2020-07-25T00:00:00Z</updated>
		<content>&lt;p&gt;[first few sections are complete, later sections yet to be updated]&lt;/p&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;A push to the remote repo consists of following two steps,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To add changes to the staging area&lt;/li&gt;
&lt;li&gt;push the staged changes to remote repo&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="how-to-add-files-or-changes-to-staged-area-to-commit-later"&gt;How to add files or changes to staged area (to commit later)&lt;/h2&gt;
&lt;p&gt;[update not complete yet]&lt;/p&gt;
&lt;p&gt;Note: commit stores file locally. Commit is not sent to remote repository unless a &lt;code&gt;push&lt;/code&gt; command is applied.&lt;/p&gt;
&lt;p&gt;Here, we give some examples of adding files/directories to staged area. Staged area&lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Git-Basics"&gt;[1]&lt;/a&gt; means the stage before commit. Anything that are modified (added/changed/deleted) in the stage area will be performed whenever a &lt;code&gt;commit&lt;/code&gt; command is applied.&lt;/p&gt;
&lt;p&gt;To add files/directories to staged area, at first, we modify or change files,&lt;/p&gt;
&lt;p&gt;Then we can add all those changes to staged area. This will include any new file as well,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add --all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But if we want to add only modifications on previously added files on repo we do this,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add --update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means new files won't be added to the staged area.&lt;/p&gt;
&lt;p&gt;Or, we can add selectively a few (after all modifications are done on those files), the files we want to commit we add them by applying a series of &lt;code&gt;git add&lt;/code&gt; commands,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add file-1
git add file-2
    ………….
    ………….
    ……………
git add file-n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, we can choose to add directory or files inside another directory (is this recursive, has to check),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add code_python/*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remove a dir entirely,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rm -r _old_code/res/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How to remove a file,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rm file1.txt
git commit --message &amp;quot;remove file1.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How to rename or move a file in the repo,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git mv original_name new_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pleae don't be confused by &amp;quot;name&amp;quot; here. It supports renaming using full path as wel. It also support renaming a directories.&lt;/p&gt;
&lt;p&gt;Removing a file from staged area, &lt;a href="http://data.agaric.com/undo-git-add-remove-files-staged-git-commit"&gt;ref&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset /location/to/file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note, this will not touch the file; only removes it from git staged area.&lt;/p&gt;
&lt;p&gt;Show the changes which have been staged (git add`ed but not committed)?, &lt;a href="https://stackoverflow.com/questions/1587846/how-do-i-show-the-changes-which-have-been-staged"&gt;ref&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git diff --cached
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The changes we made are called deltas.&lt;/p&gt;
&lt;h2 id="viewing-logs-files-and-status"&gt;Viewing Logs, Files and Status&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git --no-pager log
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="how-to-commit-staged-changes-git-commit"&gt;How to commit staged changes (git commit)&lt;/h2&gt;
&lt;p&gt;Commit to actually push the changes to local repo (will be in remote as soon as pushed). If you are doing this for the first time in the git client you installed, you need to configure committer email and user-name,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global user.name &amp;quot;John Doe&amp;quot;
git config --global user.email &amp;quot;John.Doe&amp;#64;Domain.Com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check if those are set,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global --get user.name
git config --global --get user.email
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Get git config global info all props,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global --get-regexp .*
user.email one&amp;#64;iqubit.xyz
user.name The Matrix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt; is different than &lt;code&gt;svn commit&lt;/code&gt; as &lt;code&gt;svn commit&lt;/code&gt; pushes to remote repo immediately whereas git commit does not. git usually have the entire copy just like remote repo, svn does not have entire copy.&lt;/p&gt;
&lt;p&gt;Note: commit stores file locally. Commit is not sent to remote repository unless a &lt;code&gt;push&lt;/code&gt; command is applied (we will discuss push command on next section).&lt;/p&gt;
&lt;p&gt;To add the commit message use &lt;code&gt;-m&lt;/code&gt; switch in arguments as showed below, this supports multiline,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit --message &amp;quot;first commit message&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is an example of multi-line commit message, surrounding the entire commit message with double quotes works,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit --message &amp;quot;Implemented secure functions - line1
    line2 - example line that means code won't work on Linux, we'll have to add separate
    line3 - branch for Linux
    line4 - Update on logic based on tests&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In powershell, single quote works for multi-line commit message,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit --message &amp;quot;line1
    line2
    line3
    line4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="pushing-to-remotesending-deltas-to-remote-repo-server"&gt;Pushing to remote(sending deltas to remote repo server)&lt;/h2&gt;
&lt;p&gt;Then use &amp;quot;git push origin branch_name&amp;quot;&lt;/p&gt;
&lt;p&gt;Here is an example of Pushing to remote master branch,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To show info about git repo's remote origin,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote show origin
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="git-undo-edit-commit-etc"&gt;git undo, edit commit etc&lt;/h2&gt;
&lt;p&gt;To Rollback to a specific previous commit we do,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset --hard COMMIT_SHA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Commands above does a hard reset which means it does not preserve any change locally too!&lt;/p&gt;
&lt;p&gt;To preserve changes locally so we can work on it,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset COMMIT_SHA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can push this change to remote forcefully (we should only do this if nobody else pushed changes to remote repo).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push --force
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To roll back to previous to last commit we do,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset HEAD~
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To hard reset,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset --hard HEAD~
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can edit commit message of the last commit anytime before push,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit --amend
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we want to use commit message from a file,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit --file filepath.ext
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Commit message from file (amend previous one),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit --edit --file filepath.ext
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After pushing you still can edit the commit message in 2 steps,
step 1:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit --edit --file filepath.ext
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;step 2:
Do a force push (ths is usually combined with &lt;code&gt;git commit --amend&lt;/code&gt;),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push --force origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, if someone has made another commit, in the mean time, those commits will be gone. So be aware of that!&lt;/p&gt;
&lt;p&gt;To edit previous commit messages that are pushed,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rebase --interactive 88af37e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we press Ctrl + X,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rebase --continue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Examples look like this,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like &amp;quot;squash&amp;quot;, but discard this commit's log message
# x, exec = run command (the rest of the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push --force origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: a force push destroys commits made by others (if they pushed in the mean time).&lt;/p&gt;
&lt;p&gt;To correct commit author name upto specific commit (probably? or is it only for single commit?),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset author
git rebase --interactive --preserve-merges 7508a2627bee2a28535e7ae306c51788fd287f9f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mark all of them as 'e' and keep applying following commands. In this example, the author's email address is 'alex&amp;#64;corp.xyz',&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit --amend --author &amp;quot;Alex Roy &amp;lt;alex&amp;#64;corp.xyz&amp;gt;&amp;quot; --no-edit
git rebase --continue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Changing the message of the most recently pushed commit, &lt;a href="https://docs.github.com/en/github/committing-changes-to-your-project/creating-and-editing-commits/changing-a-commit-message"&gt;ref&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push --force-with-lease example-branch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Removing a single commit from history&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There might be conflicts during the operation, some commit order gets changed as well (not order by date anymore), Be aware this is dangerous and might now work,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rebase --onto dadfe3e^ dadfe3e HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, after conflict resolution, ref&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rebase --continue
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="stash-commands"&gt;Stash Commands&lt;/h2&gt;
&lt;p&gt;Be careful while applying these commands.&lt;/p&gt;
&lt;p&gt;Stashing all local changes
Hard - stash all local changes and pull updated code. &lt;a href="https://stackoverflow.com/q/4157189"&gt;[6]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is better than ‘git stash’ It deletes unstaged changes,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -- .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Clean up all non version controlled files (&lt;code&gt;-d&lt;/code&gt;: recurse into untracked directories),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clean --force -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Find last commit id,
To get long commit id,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rev-parse HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get short commit id,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rev-parse --short HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="checking-specific-revision-of-a-file-or-getting-specific-revision"&gt;Checking specific revision of a file or getting specific revision&lt;/h2&gt;
&lt;p&gt;Checkout specific revision of a file,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout abcde file/to/restore
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;git checkout specific commit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b old_state f5bf0d670686143a67177e9d81474687535a761e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or do following,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset --hard origin/master
git fetch
git checkout -b old_state f5bf0d6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;git checkout can be useful in restoring a mistakenly delete file as well or to stash changes on a specific file,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout abcde file/to/restore
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This restore the file of the current revision. [&lt;a href="http://stackoverflow.com/questions/953481/find-and-restore-a-deleted-file-in-a-git-repository"&gt;4&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;View a commit,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git show commit_id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Show specific revision of a file, ref&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git show commit_id:file_path
git show 61c2ac6:src/bootstrapper.cc
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="misc"&gt;Misc&lt;/h2&gt;
&lt;p&gt;Check history of all git commits, snapshots using reflog&lt;a href="http://alblue.bandlem.com/2011/05/git-tip-of-week-reflogs.html"&gt;[7]&lt;/a&gt; argument,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git reflog
813d871 (HEAD -&amp;gt; source, origin/source) HEAD&amp;#64;{0}: commit: more contents added to posts
7eabf08 HEAD&amp;#64;{1}: commit: Add Windows Cmd Cache idle
79ff45d HEAD&amp;#64;{2}: commit: Add more content to pwsh post
3c7eee2 HEAD&amp;#64;{3}: commit (amend): tags syntax updated for wyam
... ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="conflict-resolution"&gt;Conflict Resolution&lt;/h2&gt;
&lt;p&gt;Most common approach in resolving conflict is to check which files are having conflict,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And what changes are coming from what side that is causing the conflict,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git diff
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Addionally, a file path can be specified to see what changes are coming from the remote and local,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git diff /path/to/file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we use a merge tool or manually modify the content file and finalize the conflict resolution. Afterwards, when are done doing that with that file we do,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add file_path
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When conflict  resolved for all files finally we do,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit --message 'conflict resolved commit and so on..'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, in some case conflict resolution can be easier. For example, you might want to discard local changes and just accept remote forcefully. In such a case we can follow this:&lt;/p&gt;
&lt;p&gt;A basic overview how to merge is on this &lt;a href="http://www.gitguys.com/topics/merging-with-a-conflict-conflicts-and-resolutions"&gt;gitguys' article&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git fetch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Accept their change for single file, ref&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout --theirs src/register-configuration.cc
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="branches"&gt;Branches&lt;/h3&gt;
&lt;p&gt;Create new branch from current branch's tip and switch to newly created branch,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b dev_branch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Show current branch and other branches,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Delete a branch on your local repo,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch --delete branch_already_merged
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Delete a branch from remote,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push origin --delete main
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Created detached head (no branch)
If we want our git repo to have no current branch then we can do this,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout COMMIT-SHA-ID
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="remote-origin-related"&gt;Remote Origin Related&lt;/h3&gt;
&lt;p&gt;Change remote URL syntax,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote set-url origin_name URL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote set-url origin https://github.com/user_name/repo_name.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add an origin to a just initialized repo,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin https://github.com/user_name/repo_name.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;git push examples,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push [remote-name] [branch-or-commit-name]
git push origin dev_branch
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="git-configuration-files"&gt;Git configuration Files&lt;/h2&gt;
&lt;p&gt;When we perform &lt;code&gt;git config&lt;/code&gt; it applies only to the current project. The configuration file that gets update is,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./.git/config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we apply &lt;code&gt;git config --global&lt;/code&gt; it updates following file,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~/.gitconfig
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If none of these exist then the systems git config file is applied. According to priority these files are presented below,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./.git/config
~/.gitconfig
/etc/gitconfig (guessing I don't recall the exact location)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Push the renamed branch to remote and set upstream,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push origin --set-upstream dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="github-usecase-examples"&gt;Github UseCase Examples&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Renaming main branch&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Rename branch&lt;/p&gt;
&lt;p&gt;git branch --move main dev&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using github UI, let's set default branch to dev, visiting following URL,&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;https://github.com/USER/REPO/settings/branches
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please replace &lt;code&gt;USER&lt;/code&gt; and &lt;code&gt;REPO&lt;/code&gt; with correct user name and repository name.&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;&lt;p&gt;Finally, delete the branch from remote,&lt;/p&gt;
&lt;p&gt;git push origin --delete main&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Git-Basics"&gt;git-scm - Getting Started - Git Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://data.agaric.com/undo-git-add-remove-files-staged-git-commit"&gt;agaric - undo, remove staged file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/4157189"&gt;SO - Git Pull While Ignoring Local Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
		<summary>Head's in the cloud! A Qubit Blog!</summary>
	</entry>
	<entry>
		<id>https://note.iqubit.xyz/posts/pwsh/powershell-legacy</id>
		<title>Legacy Powershell Useful Commands</title>
		<link href="https://note.iqubit.xyz/posts/pwsh/powershell-legacy" />
		<updated>2020-07-18T00:00:00Z</updated>
		<content>&lt;p&gt;Please be aware of notation below in command outlines. &lt;code&gt;$&lt;/code&gt; represents a command; following rest of the lines represent output. Powershell is superset of traditional command prompt. Hence, all usual binaries still run on powershell for example, &lt;code&gt;takeown&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Power Options&lt;/strong&gt;
Open Power Options Window,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Show-ControlPanelItem -Name &amp;quot;Power Options&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="service-management"&gt;Service Management&lt;/h2&gt;
&lt;p&gt;Get list of services currently running,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Get-Service | Where-Object {$_.Status -eq &amp;quot;Running&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Start a service,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Start-Service -Name VPNAgent
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Stop one,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Stop-Service -Name VPNAgent
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="scripting-using-pwsh"&gt;Scripting using pwsh&lt;/h2&gt;
&lt;p&gt;These basic stuffs might come handy,&lt;/p&gt;
&lt;p&gt;Passing all arguments, untouched to another script,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$saArgs = $args[0 .. ($args.Count)]
&amp;amp; &amp;quot;$Env:HOME\ss.ps1&amp;quot; $saArgs
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="changing-window-size"&gt;Changing Window Size&lt;/h3&gt;
&lt;p&gt;To change Window ize we change buffer size first, because Window Size depends on it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$cUI = (Get-Host).UI.RawUI
$b = $cUI.BufferSize
$b.Width = $width
$b.Height = $history_size
$cUI.BufferSize = $b

# change window height and width
$b = $cUI.WindowSize
$b.Width = $width
$b.Height = $height
$cUI.WindowSize = $b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There's oneliner to do it as well,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(Get-Host).UI.RawUI.BufferSize = New-Object System.Management.Automation.Host.Size -Property &amp;#64;{Width=$width; Height=$history_size}
(Get-Host).UI.RawUI.WindowSize = New-Object System.Management.Automation.Host.Size -Property &amp;#64;{Width=$width; Height=$height}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To change the title of the console we do,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$cUI.WindowTitle = $title
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.host.pshostuserinterface.rawui"&gt;ms docs ref&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="continue"&gt;continue&lt;/h2&gt;
&lt;p&gt;rest of the contents yet to be appended..&lt;/p&gt;
</content>
		<summary>Head's in the cloud! A Qubit Blog!</summary>
	</entry>
	<entry>
		<id>https://note.iqubit.xyz/posts/pwsh/windows-tools-cmd</id>
		<title>Command Line for Utilities and Tools</title>
		<link href="https://note.iqubit.xyz/posts/pwsh/windows-tools-cmd" />
		<updated>2019-11-29T00:00:00Z</updated>
		<content>&lt;p&gt;Please be aware of notation below in command outlines. &lt;code&gt;$&lt;/code&gt; represents a command and rests of the lines following that line are output. Powershell is superset of traditional command prompt. Hence, all usual binaries still run on powershell for exxample, &lt;code&gt;takeown&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="windows-os-tools"&gt;Windows OS Tools&lt;/h2&gt;
&lt;h3 id="balanced-power-options"&gt;Balanced Power options&lt;/h3&gt;
&lt;p&gt;Turn hibernation off (run from elevated PS),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;powercfg.exe /h off
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;List Power plans,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ powercfg list
Existing Power Schemes (* Active)
-----------------------------------
Power Scheme GUID: 381b4222-f694-41f0-9685-ff5bb260df2e  (Balanced) *
Power Scheme GUID: 433299bd-efc0-474e-a61e-4a940c85e632  (Timers off (Presentation))
Power Scheme GUID: 496d75e1-8cba-4d72-b778-535d67c976ea  (Airplane)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How to export Balanced plan (we copy paste id from output of above command),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;powercfg -Export D:\Efficient_BP.pow 381b4222-f694-41f0-9685-ff5bb260df2e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;automate importing registry (requires privilege) ref,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;reg import 'D:\Soft\reg files soft settings\app_paths\KeePass.reg'
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="winrar"&gt;WinRar&lt;/h3&gt;
&lt;p&gt;An example use of rar (in my system referring to &lt;code&gt;D:\ProgData\WinRAR\rar.exe&lt;/code&gt;),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rar a -m5 -psa1 -ep1 I:\Doc\docs.rar I:\Doc\Office_Docs\
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;without &lt;code&gt;-ep1&lt;/code&gt; it makes a big directory tree&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="gnuwin32-tools"&gt;gnuwin32 tools&lt;/h2&gt;
&lt;p&gt;similar to Unix,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;D:\ProgramFiles_x86\GnuWin32\bin\gzip.exe&amp;quot; -d .\bitarray-ex-0.8.1.tar.gz
&amp;quot;D:\ProgramFiles_x86\GnuWin32\bin\tar.exe&amp;quot; -xvf .\bitarray-ex-0.8.1.tar
&amp;quot;D:\ProgramFiles_x86\GnuWin32\bin\tar.exe&amp;quot; --version
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="external-applications"&gt;External Applications&lt;/h2&gt;
&lt;p&gt;Here are some command line examples for External Applications.&lt;/p&gt;
&lt;p&gt;using &lt;code&gt;tftp&lt;/code&gt; to uplod a file into ftp server,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; tftp -i 192.168.1.10 PUT 'E:\LinkSys E2000\images\FW_E2000_1.0.04.007_US_20101201_code.bin' FW_E2000_1.0.04.007_US_20101201_code.bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I used to use this one for 'ATA Automation'.&lt;/p&gt;
&lt;p&gt;Identify image format info using image magick's &lt;code&gt;identiy&lt;/code&gt; (referring to &lt;code&gt;C:\Program Files\ImageMagick-6.8.8-Q16\identify.exe&lt;/code&gt; in my system as an example),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;identify &amp;quot;F:\Documents\Images\From Previous Cell-Phone\2011-09\01092011.jpg&amp;quot;
identify -verbose &amp;quot;F:\Sourcecodes\Web\ASP .Net\Icons\saos_favicon.ico&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Identify image format info using image magick's &lt;code&gt;convert&lt;/code&gt; tool (referring to &lt;code&gt;C:\Program Files\ImageMagick-6.8.8-Q16\convert.exe&lt;/code&gt; in my system as an example),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;convert -background transparent
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ps2pdf&lt;/code&gt; tool (location in my system &lt;code&gt;C:\Program Files\MiKTex\miktex\bin\x64\ps2pdf.exe&lt;/code&gt;) from Miktex from example,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ps2pdf D:\Source\ml-95-ripper.ps
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="video-applications"&gt;Video Applications&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;mkvextract&lt;/strong&gt;
Extract subtitle using &lt;code&gt;mkvextract&lt;/code&gt; (referring to &lt;code&gt;C:\Program Files (x86)\MKVToolNix\mkvextract.exe&lt;/code&gt; in my system),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkvextract tracks D:\Movies\Fences.mkv &amp;quot;2:D:\Movies\Fences.srt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mkvmerge&lt;/code&gt; (in my system &lt;code&gt;C:\Program Files (x86)\MKVToolNix\mkvmerge.exe&lt;/code&gt;) show info on mkv file,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkvmerge -i D:\Movies\Fences.mkv
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>Head's in the cloud! A Qubit Blog!</summary>
	</entry>
</feed>